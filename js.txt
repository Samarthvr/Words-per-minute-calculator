if(space == 1){
        if(event.which == 32){
            space = 0;
            return;
        }
    }

    //if the user types the correct letter
    //the index of the char will be marked as correct
    //otherwise marked incorrect
    if(String.fromCharCode(event.which) == wordLib[currWord][currIndex]){
      errorArray[currIndex] = 0;
      errorLib[currWord] = errorArray;
      currIndex++;
      typedEntries++;

      //once the user has correctly typed the last character
      //the program is stopped with StopTime
      if(currWord == 49 && currIndex == wordLib[currWord].length){ //@change 4 to #words - 1
          StopTime();
          return;
      }
    }else if(String.fromCharCode(event.which) != wordLib[currWord][currIndex]){
        errorArray[currIndex] = 1;
        errorLib[currWord] = errorArray;
        if(space == 0){
            currIndex++;
        }
        numErrors++;
        typedEntries++;
    }

    //increases currWord and resets currIndex
    //when the end of a word is reached
    if(currIndex == wordLib[currWord].length){
            currWord++;
            currIndex = 0;
            space = 1;
    }
}

//separate function to handle backspace events
function BackSpace(event){
    if(event.which == 8){
        //returns if a backspace is entered at the start of text
        if(currIndex == 0 && currWord == 0){
            return;
        }
        //decreases atEnd and returns when the end has been reached
        if(atEnd > 0){
            atEnd--;
            return;
        }

        //if a space is supposed to be pressed
        //move back a character and set the index to the length of the previous word
        if(space == 1 && currIndex == 0){
            currWord--;
            currIndex = wordLib[currWord].length;
            space = 0;

        //if a space is not to be pressed
        //but the current character is the start of a word
        //make the next character to be pressed to be the spacebar
        }else if(space == 0 && currIndex == 0){
            space = 1;
            return;
        }

        currIndex--;

        //reduces the number of errors if the character that was backspaced was wrong
        if(errorLib[currWord][currIndex] == 1){
            numErrors--;
        }
    }
}

//'stops' the program
function StopTime(){
    stopped = 1;
    clearInterval(t);
    var netWPM = calcNetWPM();
    $('h2').replaceWith("<h2>Your typing speed in net WPM: " + netWPM + " words per minute." + "Errors: " + numErrors + " Time:" + seconds/10);
    $('h2').css('color', 'green');
    seconds = 0;
    timer = 0;
}

//calculate the net WPM using the formula provided
//in http://www.speedtypingonline.com/typing-equations
function calcNetWPM(){
  var grossWPM = (typedEntries / 5) / (seconds / 10 / 60);
  var netWPM = grossWPM - (numErrors / seconds / 10 / 60);
  return Math.round(netWPM * 100) / 100
}
if(space == 1){
        if(event.which == 32){
            space = 0;
            return;
        }
    }

    //if the user types the correct letter
    //the index of the char will be marked as correct
    //otherwise marked incorrect
    if(String.fromCharCode(event.which) == wordLib[currWord][currIndex]){
      errorArray[currIndex] = 0;
      errorLib[currWord] = errorArray;
      currIndex++;
      typedEntries++;

      //once the user has correctly typed the last character
      //the program is stopped with StopTime
      if(currWord == 49 && currIndex == wordLib[currWord].length){ //@change 4 to #words - 1
          StopTime();
          return;
      }
    }else if(String.fromCharCode(event.which) != wordLib[currWord][currIndex]){
        errorArray[currIndex] = 1;
        errorLib[currWord] = errorArray;
        if(space == 0){
            currIndex++;
        }
        numErrors++;
        typedEntries++;
    }

    //increases currWord and resets currIndex
    //when the end of a word is reached
    if(currIndex == wordLib[currWord].length){
            currWord++;
            currIndex = 0;
            space = 1;
    }
}

//separate function to handle backspace events
function BackSpace(event){
    if(event.which == 8){
        //returns if a backspace is entered at the start of text
        if(currIndex == 0 && currWord == 0){
            return;
        }
        //decreases atEnd and returns when the end has been reached
        if(atEnd > 0){
            atEnd--;
            return;
        }

        //if a space is supposed to be pressed
        //move back a character and set the index to the length of the previous word
        if(space == 1 && currIndex == 0){
            currWord--;
            currIndex = wordLib[currWord].length;
            space = 0;

        //if a space is not to be pressed
        //but the current character is the start of a word
        //make the next character to be pressed to be the spacebar
        }else if(space == 0 && currIndex == 0){
            space = 1;
            return;
        }

        currIndex--;

        //reduces the number of errors if the character that was backspaced was wrong
        if(errorLib[currWord][currIndex] == 1){
            numErrors--;
        }
    }
}

//'stops' the program
function StopTime(){
    stopped = 1;
    clearInterval(t);
    var netWPM = calcNetWPM();
    $('h2').replaceWith("<h2>Your typing speed in net WPM: " + netWPM + " words per minute." + "Errors: " + numErrors + " Time:" + seconds/10);
    $('h2').css('color', 'green');
    seconds = 0;
    timer = 0;
}

//calculate the net WPM using the formula provided
//in http://www.speedtypingonline.com/typing-equations
function calcNetWPM(){
  var grossWPM = (typedEntries / 5) / (seconds / 10 / 60);
  var netWPM = grossWPM - (numErrors / seconds / 10 / 60);
  return Math.round(netWPM * 100) / 100
}